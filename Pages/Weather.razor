@page "/weather"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent // This is the base class for all Fluxor components, it provides the Store property

@using Fluxor
@using Fluxor.Undo
@using BlazorWithRedux.Store.Weather.State
@using BlazorWithRedux.Store.Weather.Actions


@inject IDispatcher Dispatcher
@inject IState<UndoableWeatherState> UndoableWeatherState

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (loading)
{
    <p><em>Loading...</em></p>

    <hr />
    <h1 class="mt-3">Undo/Redo</h1>
    <div class="row">
        <div class="col">
            <button class="btn btn-secondary" @onclick=@(() => Dispatcher.Dispatch(new UndoAllAction<UndoableWeatherState>())) disabled="@UndoableWeatherState.Value.HasNoPast">&lt;&lt;</button>
            <button class="btn btn-secondary" @onclick=@(() => Dispatcher.Dispatch(new UndoAction<UndoableWeatherState>())) disabled="@UndoableWeatherState.Value.HasNoPast">&lt;</button>
            <button class="btn btn-secondary" @onclick=@(() => Dispatcher.Dispatch(new RedoAction<UndoableWeatherState>())) disabled="@UndoableWeatherState.Value.HasNoFuture">&gt;</button>
            <button class="btn btn-secondary" @onclick=@(() => Dispatcher.Dispatch(new RedoAllAction<UndoableWeatherState>())) disabled="@UndoableWeatherState.Value.HasNoFuture">&gt;&gt;</button>
        </div>
    </div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts.Take(10))
                {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
    <br />
    <button class="btn btn-outline-info" @onclick="LoadForecasts">Refresh Forecasts</button>
    <hr />
    <h1 class="mt-3">Undo/Redo</h1>
    <div class="row">
        <div class="col">
            <button class="btn btn-secondary" @onclick=@(() => Dispatcher.Dispatch(new UndoAllAction<UndoableWeatherState>())) disabled="@UndoableWeatherState.Value.HasNoPast">&lt;&lt;</button>
            <button class="btn btn-secondary" @onclick=@(() => Dispatcher.Dispatch(new UndoAction<UndoableWeatherState>())) disabled="@UndoableWeatherState.Value.HasNoPast">&lt;</button>
            <button class="btn btn-secondary" @onclick=@(() => Dispatcher.Dispatch(new RedoAction<UndoableWeatherState>())) disabled="@UndoableWeatherState.Value.HasNoFuture">&gt;</button>
            <button class="btn btn-secondary" @onclick=@(() => Dispatcher.Dispatch(new RedoAllAction<UndoableWeatherState>())) disabled="@UndoableWeatherState.Value.HasNoFuture">&gt;&gt;</button>
        </div>
    </div>
}

@code {

    private WeatherForecast[] forecasts => UndoableWeatherState.Value.Present.Forecasts;
    private bool loading => UndoableWeatherState.Value.Present.Loading;

    protected override void OnInitialized()
    {
        if (UndoableWeatherState.Value.Present.Initialized == false)
        {
            LoadForecasts();
            Dispatcher.Dispatch(new WeatherSetInitializedAction());
        }
        base.OnInitialized();
    }

    private void LoadForecasts()
    {
        Dispatcher.Dispatch(new WeatherLoadForecastsAction());
    }

}